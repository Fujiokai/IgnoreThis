local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local PushRemote = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("PushPlayer")
local pushPower = 1000 
local pushRadius = 20
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")

LocalPlayer.CharacterAdded:Connect(function(newChar)
    Character = newChar
    HRP = Character:WaitForChild("HumanoidRootPart")
end)

local function pushNearbyPlayers()
    if not HRP then return end
    local pushedSomeone = false
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local targetHRP = player.Character.HumanoidRootPart
            local distance = (HRP.Position - targetHRP.Position).Magnitude
            if distance <= pushRadius then
                local direction = (targetHRP.Position - HRP.Position).Unit * pushPower
                local success = PushRemote:InvokeServer(player, direction)
                if success then
                    StarterGui:SetCore("SendNotification", {
                        Title = "Push",
                        Text = "You pushed " .. player.Name,
                        Duration = 2
                    })
                    pushedSomeone = true
                    break
                end
            end
        end
    end
    if not pushedSomeone then
        StarterGui:SetCore("SendNotification", {
            Title = "Failed",
            Text = "either cd or inactive",
            Duration = 2
        })
    end
end
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.R then
        pushNearbyPlayers()
    end
end)
